API 到底是个什么东西? 我想用这么一句英语可以很好地解释: *API is something you can program against.* 很抱歉其中的"program against"部分我很难找到对应的中文翻译. 具体说来, 包括数据结构的设计与选取, 函数/方法的参数安排, 对象的职责分配, 加上这个web时代的url, 数据交换格式等, 都可以涵盖在内.

API设计并不是一个很新的概念, [有这么一整本书都是讲这个的.](http://book.douban.com/subject/3178601/ "有这么一整本书都是讲这个的.") 在我个人看来, 这一话题应该作为所有程序员的基础知识普及开来, 而不是仅仅成为"架构师"这种顶着华丽头衔的高级开发者的专利. 掌握了这种重要的基础知识, 并且有意识地锻炼之, 才能够应对日趋复杂的软件开发, 而不是被称为脚本小子.

### 基础知识?

是的, 我想软件开发更多地还应该算是脑力劳动, 是创造性工作, 是设计. 而 API 设计就是最基础的环节. 也许市面上盛传的"算法 + 数据结构 = 程序"让人们觉得算法好重要, 学生时代有大把时间更应该拿来学算法, 最好参加个什么竞赛之类的. 在这里我只能强烈反对"竞赛化"和算法至上论.

遗憾的是, 设计性质的东西往往只能主观地做评价, 计算机作为理工学科(至少在学校里)更欢迎算法竞赛这种易于量化的东西. 结果很多API设计的原则会被伪装成"实践经验", 我认为把这些原则抽取出来, 总结成教条, 再辅以举例解说, 但愿最终可以把"不实际动手写就体会不到"的经验用人类语言表达出来, 便于知识的传播吧.

### 设计模式呢?

设计模式这一概念远比 API 设计要流行得多. 我想主要还是要归功于著名的[GoF设计模式](http://book.douban.com/subject/1436745/ "GoF设计模式")一书 - 出版早, 概念又响亮, 译成中文也很pro, 自然容易被人拿来当作谈资. 而我个人觉得, 设计模式毕竟是"常见问题下的常用设计方案", 脱离了基础的设计方法去谈模式, 甚至大谈"精通MVC", 无异于先学跑后学走.

### 为什么听你的?

我自诩现在处于"有意识到API设计的重要性稍有经验但不充分"的状态. 既非懵懂状态的新人, 又不像老手那般把编程培养成了第二天性而难以用语言描述其中的来龙去脉[1]. 所以这一系列文章可以看作是我的学习笔记. 读者群体也定位在初学者的级别, 再具体点描述就是"语法熟悉了但写不出完整程序"这样吧.

噢对了, 以往见过的谈软件设计的书籍多半基于java编程语言, 而我的学习顺序则是 JavaScript -> Ruby, 所以也只能站在现代动态语言的角度来看待问题了. 所以在小店的文章里你不会看到"抽象类vs接口"的讨论, 也不会看到策略模式(strategy pattern)的解析, 当然设计模式的内容不可避免地还是会谈及.

此外前面也有提到, 设计性质的工作往往只能主观地评价. 但软件开发毕竟包含了很多工程的因素, 工程化的东西还是需要理性决策来支撑的, 加之当一个设计师生发出自己的风格之前, 画鸡蛋式的素质训练还是需要的. 本店文章就会走这种基础路线, 避免陷入风格的争执中去.

初步的想法是每7-10天写一篇, 不过当然没法保证... Anyway, stay tuned :)

[1]: 很明显还有既精通编程又善于传道授业的大师, 但是你不一定遇得到...
